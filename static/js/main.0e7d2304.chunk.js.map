{"version":3,"sources":["reportWebVitals.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getWaveContract","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","abi","console","log","checkIfWalletIsConnected","setCurrentAccount","setWaves","a","request","method","accounts","length","account","wavePortalContract","getWaves","waves","App","useState","message","setMessage","isMining","setIsMining","currentAccount","useEffect","connectWallet","alert","wave","waveTxn","hash","wait","error","className","display","maxW","m","alignItems","flexDirection","mb","gridGap","placeholder","value","onChange","evt","target","colorScheme","isLoading","loadingText","onClick","disabled","mt","map","str","waver","substring","Date","timestamp","toString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e7d2304.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ethers } from 'ethers';\nimport {useEffect, useState} from 'react';\nimport {Button, Box, Heading, Text, Table, Thead, Tbody, Input, Tr, Th, Td, TableCaption} from '@chakra-ui/react';\n\nimport abi from './utils/WavePortal.json';\n\nconst contractAddress = \"0xA11BB5c6C8bABa0045BaF4b393d119151158AeCf\";\n\nconst abbreviate = (str) => {\n  let abbreviated;\n  if (str >= 42) {\n      abbreviated = `${str.substring(0,6)}...${str.substring(str.length - 4)}`\n  } else {\n      abbreviated = str;\n  }\n\n  return abbreviated;\n}\n\n\nconst getWaveContract = () => {\n  const {ethereum} = window;\n\n    if (!ethereum) {\n      console.log('Etherium object does not exist!');\n      return;\n    }\n\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    return new ethers.Contract(contractAddress, abi.abi, signer);\n}\n\nconst checkIfWalletIsConnected = async (setCurrentAccount, setWaves) => {\n  try {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    /*\n    * Check if we're authorized to access the user's wallet\n    */\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account)\n\n      const wavePortalContract = getWaveContract();\n\n      const waves = await wavePortalContract.getWaves();\n      setWaves(waves);\n    } else {\n      console.log(\"No authorized account found\")\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nconst App = () => {\n  const [message, setMessage] = useState('');\n  const [waves, setWaves] = useState([]);\n  const [isMining, setIsMining] = useState(false);\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  useEffect(() => {\n    checkIfWalletIsConnected(setCurrentAccount, setWaves);\n  }, [])\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const wave = async () => {\n    try {\n      const {ethereum} = window;\n\n      if (!ethereum || !message.length) {\n        console.log('Etherium object does not exist!');\n        return;\n      }\n\n      const wavePortalContract = getWaveContract()\n\n      // now actually wave\n      const waveTxn = await wavePortalContract.wave(message);\n      console.log(\"Mining...\", waveTxn.hash);\n      setIsMining(true);\n      await waveTxn.wait();\n      console.log(`Mined -- ${waveTxn.hash}`);\n      setIsMining(false);\n\n      const waves = await wavePortalContract.getWaves();\n\n      setWaves(waves);\n      setMessage('');\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const handleChange = (evt) => setMessage(evt.target.value);\n\n  return (\n    <Box className=\"App\" display=\"flex\" maxW=\"36rem\" m=\"1rem auto\" alignItems=\"center\" flexDirection=\"column\">\n      <Text>Welcome,</Text>\n      <Text>This site is powered by React & smart contracts on the ethereum rinkeby blockchain</Text>\n      {waves.length ? <Heading mb=\"1rem\">Total Waves: {waves.length}</Heading> : null}\n      {!currentAccount ?\n        <Button colorScheme=\"purple\" onClick={connectWallet}>Connect Wallet</Button>\n      : (\n        <Box display=\"flex\" gridGap=\"1rem\">\n          <Input placeholder=\"Message...\" value={message} onChange={handleChange} />\n          <Button colorScheme=\"green\" isLoading={isMining} loadingText=\"Mining...\" onClick={wave} disabled={!message.length}>Wave</Button>\n        </Box>\n      )}\n      <Table mt=\"1rem\">\n        <TableCaption>Past Waves</TableCaption>\n        <Thead>\n          <Tr>\n            <Th>Waver</Th>\n            <Th>Timestamp</Th>\n            <Th>Message</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {waves.map(wave => (\n            <Tr key={wave.waver}>\n              <Td>{abbreviate(wave.waver)}</Td>\n              <Td>{new Date(wave.timestamp * 1000).toString()}</Td>\n              <Td>{wave.message}</Td>\n            </Tr>\n          ))}\n        </Tbody>\n      </Table>\n    </Box>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport {ChakraProvider} from '@chakra-ui/react';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}