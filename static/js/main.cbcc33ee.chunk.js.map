{"version":3,"sources":["reportWebVitals.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getWaveContract","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","abi","console","log","checkIfWalletIsConnected","setCurrentAccount","setTotalWaves","a","request","method","accounts","length","account","wavePortalContract","getTotalWaves","count","toNumber","App","useState","totalWaves","isMining","setIsMining","currentAccount","useEffect","connectWallet","alert","wave","waveTxn","hash","wait","error","className","display","maxW","m","alignItems","flexDirection","mb","colorScheme","isLoading","loadingText","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sLAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,2FCCRQ,EAAkB,WACtB,IAAOC,EAAYC,OAAZD,SAEL,GAAKA,EAAL,CAKA,IACME,EADW,IAAIC,IAAOC,UAAUC,aAAaL,GAC3BM,YACxB,OAAO,IAAIH,IAAOI,SAZE,6CAYwBC,EAAIA,IAAKN,GANnDO,QAAQC,IAAI,oCASZC,EAAwB,uCAAG,WAAOC,EAAmBC,GAA1B,yBAAAC,EAAA,oEAERb,OAAbD,EAFqB,EAErBA,SAFqB,uBAK3BS,QAAQC,IAAI,gCALe,0BAQ3BD,QAAQC,IAAI,8BAA+BV,GARhB,wBAcNA,EAASe,QAAQ,CAAEC,OAAQ,iBAdrB,WAgBL,KAFlBC,EAduB,QAgBhBC,OAhBgB,wBAiBrBC,EAAUF,EAAS,GACzBR,QAAQC,IAAI,+BAAgCS,GAC5CP,EAAkBO,GAEZC,EAAqBrB,IArBA,UAuBTqB,EAAmBC,gBAvBV,QAuBvBC,EAvBuB,OAwB3BT,EAAcS,EAAMC,YAxBO,wBA0B3Bd,QAAQC,IAAI,+BA1Be,0DA6B7BD,QAAQC,IAAR,MA7B6B,0DAAH,wDAoGfc,EAnEH,WACV,MAAoCC,mBAAS,GAA7C,mBAAOC,EAAP,KAAmBb,EAAnB,KACA,EAAgCY,oBAAS,GAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KACA,EAA4CH,mBAAS,IAArD,mBAAOI,EAAP,KAAuBjB,EAAvB,KAEAkB,qBAAU,WACRnB,EAAyBC,EAAmBC,KAC3C,IAEH,IAAMkB,EAAa,uCAAG,gCAAAjB,EAAA,oEAEGb,OAAbD,EAFU,EAEVA,SAFU,uBAKhBgC,MAAM,iBALU,0CASKhC,EAASe,QAAQ,CAAEC,OAAQ,wBAThC,OASZC,EATY,OAWlBR,QAAQC,IAAI,YAAaO,EAAS,IAClCL,EAAkBK,EAAS,IAZT,kDAclBR,QAAQC,IAAR,MAdkB,0DAAH,qDAkBbuB,EAAI,uCAAG,kCAAAnB,EAAA,oEAEUb,OAFV,EAEFD,SAFE,uBAKPS,QAAQC,IAAI,mCALL,iCASHU,EAAqBrB,IATlB,SAWSqB,EAAmBC,gBAX5B,cAWLC,EAXK,OAYTT,EAAcS,EAAMC,YAZX,UAeaH,EAAmBa,OAfhC,eAeHC,EAfG,OAgBTzB,QAAQC,IAAI,YAAawB,EAAQC,MACjCP,GAAY,GAjBH,UAkBHM,EAAQE,OAlBL,eAmBT3B,QAAQC,IAAR,mBAAwBwB,EAAQC,OAChCP,GAAY,GApBH,UAsBKR,EAAmBC,gBAtBxB,QAsBTC,EAtBS,OAuBTT,EAAcS,EAAMC,YAvBX,kDAyBTd,QAAQ4B,MAAR,MAzBS,0DAAH,qDA8BV,OACE,eAAC,IAAD,CAAKC,UAAU,MAAMC,QAAQ,OAAOC,KAAK,QAAQC,EAAE,YAAYC,WAAW,SAASC,cAAc,SAAjG,UACGjB,EAAa,eAAC,IAAD,CAASkB,GAAG,OAAZ,0BAAiClB,KAAwB,KACrEG,EAEA,cAAC,IAAD,CAAQgB,YAAY,QAAQC,UAAWnB,EAAUoB,YAAY,YAAYC,QAASf,EAAlF,kBADA,cAAC,IAAD,CAAQY,YAAY,SAASG,QAASjB,EAAtC,gCC5GRkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1B/D,K","file":"static/js/main.cbcc33ee.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ethers } from 'ethers';\nimport {Button, Box, Heading} from '@chakra-ui/react';\nimport {useEffect, useState} from 'react';\n\nimport abi from './utils/WavePortal.json';\n\nconst contractAddress = \"0x742dE00e591EdE1dc744356217ADAE4ab1B93403\";\n\nconst getWaveContract = () => {\n  const {ethereum} = window;\n\n    if (!ethereum) {\n      console.log('Etherium object does not exist!');\n      return;\n    }\n\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    return new ethers.Contract(contractAddress, abi.abi, signer);\n}\n\nconst checkIfWalletIsConnected = async (setCurrentAccount, setTotalWaves) => {\n  try {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    /*\n    * Check if we're authorized to access the user's wallet\n    */\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account)\n\n      const wavePortalContract = getWaveContract();\n\n      let count = await wavePortalContract.getTotalWaves();\n      setTotalWaves(count.toNumber());\n    } else {\n      console.log(\"No authorized account found\")\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nconst App = () => {\n  const [totalWaves, setTotalWaves] = useState(0);\n  const [isMining, setIsMining] = useState(false);\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  useEffect(() => {\n    checkIfWalletIsConnected(setCurrentAccount, setTotalWaves);\n  }, [])\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const wave = async () => {\n    try {\n      const {ethereum} = window;\n\n      if (!ethereum) {\n        console.log('Etherium object does not exist!');\n        return;\n      }\n\n      const wavePortalContract = getWaveContract()\n\n      let count = await wavePortalContract.getTotalWaves();\n      setTotalWaves(count.toNumber());\n\n      // now actually wave\n      const waveTxn = await wavePortalContract.wave();\n      console.log(\"Mining...\", waveTxn.hash);\n      setIsMining(true);\n      await waveTxn.wait();\n      console.log(`Mined -- ${waveTxn.hash}`);\n      setIsMining(false);\n\n      count = await wavePortalContract.getTotalWaves();\n      setTotalWaves(count.toNumber());\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n\n  return (\n    <Box className=\"App\" display=\"flex\" maxW=\"36rem\" m=\"1rem auto\" alignItems=\"center\" flexDirection=\"column\">\n      {totalWaves ? <Heading mb=\"1rem\">Total Waves: {totalWaves}</Heading> : null}\n      {!currentAccount ?\n        <Button colorScheme=\"purple\" onClick={connectWallet}>Connect Wallet</Button>\n      : <Button colorScheme=\"green\" isLoading={isMining} loadingText=\"Mining...\" onClick={wave}>Wave</Button>}\n    </Box>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport {ChakraProvider} from '@chakra-ui/react';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}