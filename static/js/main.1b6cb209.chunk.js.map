{"version":3,"sources":["reportWebVitals.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getWaveContract","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","abi","console","log","sortWaves","waves","wavesArr","sort","a","b","timestamp","toNumber","checkIfWalletIsConnected","setCurrentAccount","setWaves","request","method","accounts","length","account","wavePortalContract","getWaves","on","from","message","prevState","waver","App","useState","setMessage","isMining","setIsMining","currentAccount","useEffect","connectWallet","alert","wave","waveTxn","hash","wait","error","className","display","maxW","m","alignItems","flexDirection","href","target","color","mb","gridGap","mt","placeholder","value","onChange","evt","colorScheme","isLoading","loadingText","onClick","disabled","map","index","str","substring","Date","toString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b6cb209.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ethers } from 'ethers';\nimport {useEffect, useState} from 'react';\nimport {Button, Box, Heading, Text, Link, Table, Thead, Tbody, Input, Tr, Th, Td, TableCaption} from '@chakra-ui/react';\n\nimport abi from './utils/WavePortal.json';\n\nconst contractAddress = \"0x80e4CccF8347c3f46ab7773E4196e4EBee8F9D60\";\n\nconst abbreviate = (str) => {\n  let abbreviated;\n  if (str >= 42) {\n      abbreviated = `${str.substring(0,6)}...${str.substring(str.length - 4)}`\n  } else {\n      abbreviated = str;\n  }\n\n  return abbreviated;\n}\n\n\nconst getWaveContract = () => {\n  const {ethereum} = window;\n\n    if (!ethereum) {\n      console.log('Etherium object does not exist!');\n      return;\n    }\n\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    return new ethers.Contract(contractAddress, abi.abi, signer);\n}\n\nconst sortWaves = (waves) => {\n  const wavesArr = [...waves];\n\n  wavesArr.sort((a,b) => b.timestamp.toNumber() - a.timestamp.toNumber());\n\n  return wavesArr;\n}\n\nconst checkIfWalletIsConnected = async (setCurrentAccount, setWaves) => {\n  try {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    /*\n    * Check if we're authorized to access the user's wallet\n    */\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account)\n\n      const wavePortalContract = getWaveContract();\n\n      let waves = await wavePortalContract.getWaves();\n\n      setWaves(sortWaves(waves));\n\n      wavePortalContract.on('NewWave', (from, message, timestamp) => {\n        console.log('new wave', from, message, timestamp);\n        setWaves(prevState => [{waver: from, message, timestamp}, ...prevState])\n      })\n    } else {\n      console.log(\"No authorized account found\")\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nconst App = () => {\n  const [message, setMessage] = useState('');\n  const [waves, setWaves] = useState([]);\n  const [isMining, setIsMining] = useState(false);\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  useEffect(() => {\n    checkIfWalletIsConnected(setCurrentAccount, setWaves);\n  }, [])\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const wave = async () => {\n    try {\n      const {ethereum} = window;\n\n      if (!ethereum || !message.length) {\n        console.log('Etherium object does not exist!');\n        return;\n      }\n\n      const wavePortalContract = getWaveContract()\n\n      // now actually wave\n      const waveTxn = await wavePortalContract.wave(message);\n      console.log(\"Mining...\", waveTxn.hash);\n      setIsMining(true);\n      await waveTxn.wait();\n      console.log(`Mined -- ${waveTxn.hash}`);\n      setIsMining(false);\n      setMessage('');\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const handleChange = (evt) => setMessage(evt.target.value);\n\n  return (\n    <Box className=\"App\" display=\"flex\" maxW=\"36rem\" m=\"1rem auto\" alignItems=\"center\" flexDirection=\"column\">\n      <Text>Welcome,</Text>\n      <Text>This site is powered by <Link href=\"https://reactjs.org/\" target=\"_blank\" color=\"green.500\">React</Link>, <Link href=\"https://chakra-ui.com/\" target=\"_blank\" color=\"green.500\">ChakraUI</Link> & smart contracts on the ethereum rinkeby blockchain</Text>\n      {waves.length ? <Heading mb=\"1rem\">Total Waves: {waves.length}</Heading> : null}\n      {!currentAccount ?\n        <Button colorScheme=\"purple\" onClick={connectWallet}>Connect Wallet</Button>\n      : (\n        <Box display=\"flex\" gridGap=\"1rem\" mt=\"1rem\">\n          <Input placeholder=\"Message...\" value={message} onChange={handleChange} />\n          <Button colorScheme=\"green\" isLoading={isMining} loadingText=\"Mining...\" onClick={wave} disabled={!message.length}>Wave</Button>\n        </Box>\n      )}\n      <Table mt=\"1rem\">\n        <TableCaption>Past Waves</TableCaption>\n        <Thead>\n          <Tr>\n            <Th>Waver</Th>\n            <Th>Timestamp</Th>\n            <Th>Message</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {waves.map((wave, index) => (\n            <Tr key={`${wave.waver}-${index}`}>\n              <Td>{abbreviate(wave.waver)}</Td>\n              <Td>{new Date(wave.timestamp * 1000).toString()}</Td>\n              <Td>{wave.message}</Td>\n            </Tr>\n          ))}\n        </Tbody>\n      </Table>\n    </Box>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport {ChakraProvider} from '@chakra-ui/react';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}